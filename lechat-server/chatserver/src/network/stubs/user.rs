// This file is generated by rust-protobuf 3.5.1. Do not edit
// .proto file is parsed by protoc 25.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `user.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_1;

// @@protoc_insertion_point(message:microchat.user.RegisterRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RegisterRequest {
    // message fields
    // @@protoc_insertion_point(field:microchat.user.RegisterRequest.username)
    pub username: ::std::string::String,
    // @@protoc_insertion_point(field:microchat.user.RegisterRequest.nickname)
    pub nickname: ::std::string::String,
    // @@protoc_insertion_point(field:microchat.user.RegisterRequest.mobile)
    pub mobile: ::std::string::String,
    // @@protoc_insertion_point(field:microchat.user.RegisterRequest.password)
    pub password: ::std::string::String,
    // @@protoc_insertion_point(field:microchat.user.RegisterRequest.gender)
    pub gender: ::protobuf::EnumOrUnknown<Gender>,
    // special fields
    // @@protoc_insertion_point(special_field:microchat.user.RegisterRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RegisterRequest {
    fn default() -> &'a RegisterRequest {
        <RegisterRequest as ::protobuf::Message>::default_instance()
    }
}

impl RegisterRequest {
    pub fn new() -> RegisterRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "username",
            |m: &RegisterRequest| { &m.username },
            |m: &mut RegisterRequest| { &mut m.username },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nickname",
            |m: &RegisterRequest| { &m.nickname },
            |m: &mut RegisterRequest| { &mut m.nickname },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mobile",
            |m: &RegisterRequest| { &m.mobile },
            |m: &mut RegisterRequest| { &mut m.mobile },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "password",
            |m: &RegisterRequest| { &m.password },
            |m: &mut RegisterRequest| { &mut m.password },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gender",
            |m: &RegisterRequest| { &m.gender },
            |m: &mut RegisterRequest| { &mut m.gender },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RegisterRequest>(
            "RegisterRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RegisterRequest {
    const NAME: &'static str = "RegisterRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.username = is.read_string()?;
                },
                18 => {
                    self.nickname = is.read_string()?;
                },
                26 => {
                    self.mobile = is.read_string()?;
                },
                34 => {
                    self.password = is.read_string()?;
                },
                40 => {
                    self.gender = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.username);
        }
        if !self.nickname.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.nickname);
        }
        if !self.mobile.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.mobile);
        }
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.password);
        }
        if self.gender != ::protobuf::EnumOrUnknown::new(Gender::Male) {
            my_size += ::protobuf::rt::int32_size(5, self.gender.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.username.is_empty() {
            os.write_string(1, &self.username)?;
        }
        if !self.nickname.is_empty() {
            os.write_string(2, &self.nickname)?;
        }
        if !self.mobile.is_empty() {
            os.write_string(3, &self.mobile)?;
        }
        if !self.password.is_empty() {
            os.write_string(4, &self.password)?;
        }
        if self.gender != ::protobuf::EnumOrUnknown::new(Gender::Male) {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&self.gender))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RegisterRequest {
        RegisterRequest::new()
    }

    fn clear(&mut self) {
        self.username.clear();
        self.nickname.clear();
        self.mobile.clear();
        self.password.clear();
        self.gender = ::protobuf::EnumOrUnknown::new(Gender::Male);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RegisterRequest {
        static instance: RegisterRequest = RegisterRequest {
            username: ::std::string::String::new(),
            nickname: ::std::string::String::new(),
            mobile: ::std::string::String::new(),
            password: ::std::string::String::new(),
            gender: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RegisterRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RegisterRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RegisterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisterRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:microchat.user.CustomLogin)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CustomLogin {
    // message fields
    // @@protoc_insertion_point(field:microchat.user.CustomLogin.username)
    pub username: ::std::string::String,
    // @@protoc_insertion_point(field:microchat.user.CustomLogin.password)
    pub password: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:microchat.user.CustomLogin.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CustomLogin {
    fn default() -> &'a CustomLogin {
        <CustomLogin as ::protobuf::Message>::default_instance()
    }
}

impl CustomLogin {
    pub fn new() -> CustomLogin {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "username",
            |m: &CustomLogin| { &m.username },
            |m: &mut CustomLogin| { &mut m.username },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "password",
            |m: &CustomLogin| { &m.password },
            |m: &mut CustomLogin| { &mut m.password },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CustomLogin>(
            "CustomLogin",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CustomLogin {
    const NAME: &'static str = "CustomLogin";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.username = is.read_string()?;
                },
                18 => {
                    self.password = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.username);
        }
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.password);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.username.is_empty() {
            os.write_string(1, &self.username)?;
        }
        if !self.password.is_empty() {
            os.write_string(2, &self.password)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CustomLogin {
        CustomLogin::new()
    }

    fn clear(&mut self) {
        self.username.clear();
        self.password.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CustomLogin {
        static instance: CustomLogin = CustomLogin {
            username: ::std::string::String::new(),
            password: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CustomLogin {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CustomLogin").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CustomLogin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomLogin {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:microchat.user.MobileLogin)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MobileLogin {
    // message fields
    // @@protoc_insertion_point(field:microchat.user.MobileLogin.mobile)
    pub mobile: ::std::string::String,
    // @@protoc_insertion_point(field:microchat.user.MobileLogin.code)
    pub code: u32,
    // special fields
    // @@protoc_insertion_point(special_field:microchat.user.MobileLogin.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MobileLogin {
    fn default() -> &'a MobileLogin {
        <MobileLogin as ::protobuf::Message>::default_instance()
    }
}

impl MobileLogin {
    pub fn new() -> MobileLogin {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mobile",
            |m: &MobileLogin| { &m.mobile },
            |m: &mut MobileLogin| { &mut m.mobile },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &MobileLogin| { &m.code },
            |m: &mut MobileLogin| { &mut m.code },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MobileLogin>(
            "MobileLogin",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MobileLogin {
    const NAME: &'static str = "MobileLogin";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.mobile = is.read_string()?;
                },
                16 => {
                    self.code = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.mobile.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.mobile);
        }
        if self.code != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.mobile.is_empty() {
            os.write_string(1, &self.mobile)?;
        }
        if self.code != 0 {
            os.write_uint32(2, self.code)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MobileLogin {
        MobileLogin::new()
    }

    fn clear(&mut self) {
        self.mobile.clear();
        self.code = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MobileLogin {
        static instance: MobileLogin = MobileLogin {
            mobile: ::std::string::String::new(),
            code: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MobileLogin {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MobileLogin").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MobileLogin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MobileLogin {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:microchat.user.LoginRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LoginRequest {
    // message fields
    // @@protoc_insertion_point(field:microchat.user.LoginRequest.client_type)
    pub client_type: ::protobuf::EnumOrUnknown<super::chatmsg::ClientType>,
    // @@protoc_insertion_point(field:microchat.user.LoginRequest.status)
    pub status: ::protobuf::EnumOrUnknown<super::chatmsg::OnlineStatus>,
    // message oneof groups
    pub login_type: ::std::option::Option<login_request::Login_type>,
    // special fields
    // @@protoc_insertion_point(special_field:microchat.user.LoginRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LoginRequest {
    fn default() -> &'a LoginRequest {
        <LoginRequest as ::protobuf::Message>::default_instance()
    }
}

impl LoginRequest {
    pub fn new() -> LoginRequest {
        ::std::default::Default::default()
    }

    // .microchat.user.CustomLogin custom = 1;

    pub fn custom(&self) -> &CustomLogin {
        match self.login_type {
            ::std::option::Option::Some(login_request::Login_type::Custom(ref v)) => v,
            _ => <CustomLogin as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_custom(&mut self) {
        self.login_type = ::std::option::Option::None;
    }

    pub fn has_custom(&self) -> bool {
        match self.login_type {
            ::std::option::Option::Some(login_request::Login_type::Custom(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_custom(&mut self, v: CustomLogin) {
        self.login_type = ::std::option::Option::Some(login_request::Login_type::Custom(v))
    }

    // Mutable pointer to the field.
    pub fn mut_custom(&mut self) -> &mut CustomLogin {
        if let ::std::option::Option::Some(login_request::Login_type::Custom(_)) = self.login_type {
        } else {
            self.login_type = ::std::option::Option::Some(login_request::Login_type::Custom(CustomLogin::new()));
        }
        match self.login_type {
            ::std::option::Option::Some(login_request::Login_type::Custom(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_custom(&mut self) -> CustomLogin {
        if self.has_custom() {
            match self.login_type.take() {
                ::std::option::Option::Some(login_request::Login_type::Custom(v)) => v,
                _ => panic!(),
            }
        } else {
            CustomLogin::new()
        }
    }

    // .microchat.user.MobileLogin mobile = 2;

    pub fn mobile(&self) -> &MobileLogin {
        match self.login_type {
            ::std::option::Option::Some(login_request::Login_type::Mobile(ref v)) => v,
            _ => <MobileLogin as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_mobile(&mut self) {
        self.login_type = ::std::option::Option::None;
    }

    pub fn has_mobile(&self) -> bool {
        match self.login_type {
            ::std::option::Option::Some(login_request::Login_type::Mobile(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_mobile(&mut self, v: MobileLogin) {
        self.login_type = ::std::option::Option::Some(login_request::Login_type::Mobile(v))
    }

    // Mutable pointer to the field.
    pub fn mut_mobile(&mut self) -> &mut MobileLogin {
        if let ::std::option::Option::Some(login_request::Login_type::Mobile(_)) = self.login_type {
        } else {
            self.login_type = ::std::option::Option::Some(login_request::Login_type::Mobile(MobileLogin::new()));
        }
        match self.login_type {
            ::std::option::Option::Some(login_request::Login_type::Mobile(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_mobile(&mut self) -> MobileLogin {
        if self.has_mobile() {
            match self.login_type.take() {
                ::std::option::Option::Some(login_request::Login_type::Mobile(v)) => v,
                _ => panic!(),
            }
        } else {
            MobileLogin::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, CustomLogin>(
            "custom",
            LoginRequest::has_custom,
            LoginRequest::custom,
            LoginRequest::mut_custom,
            LoginRequest::set_custom,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, MobileLogin>(
            "mobile",
            LoginRequest::has_mobile,
            LoginRequest::mobile,
            LoginRequest::mut_mobile,
            LoginRequest::set_mobile,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "client_type",
            |m: &LoginRequest| { &m.client_type },
            |m: &mut LoginRequest| { &mut m.client_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &LoginRequest| { &m.status },
            |m: &mut LoginRequest| { &mut m.status },
        ));
        oneofs.push(login_request::Login_type::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LoginRequest>(
            "LoginRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LoginRequest {
    const NAME: &'static str = "LoginRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.login_type = ::std::option::Option::Some(login_request::Login_type::Custom(is.read_message()?));
                },
                18 => {
                    self.login_type = ::std::option::Option::Some(login_request::Login_type::Mobile(is.read_message()?));
                },
                24 => {
                    self.client_type = is.read_enum_or_unknown()?;
                },
                32 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.client_type != ::protobuf::EnumOrUnknown::new(super::chatmsg::ClientType::WINDOWS) {
            my_size += ::protobuf::rt::int32_size(3, self.client_type.value());
        }
        if self.status != ::protobuf::EnumOrUnknown::new(super::chatmsg::OnlineStatus::OFFLINE) {
            my_size += ::protobuf::rt::int32_size(4, self.status.value());
        }
        if let ::std::option::Option::Some(ref v) = self.login_type {
            match v {
                &login_request::Login_type::Custom(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &login_request::Login_type::Mobile(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.client_type != ::protobuf::EnumOrUnknown::new(super::chatmsg::ClientType::WINDOWS) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.client_type))?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(super::chatmsg::OnlineStatus::OFFLINE) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        if let ::std::option::Option::Some(ref v) = self.login_type {
            match v {
                &login_request::Login_type::Custom(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
                },
                &login_request::Login_type::Mobile(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LoginRequest {
        LoginRequest::new()
    }

    fn clear(&mut self) {
        self.login_type = ::std::option::Option::None;
        self.login_type = ::std::option::Option::None;
        self.client_type = ::protobuf::EnumOrUnknown::new(super::chatmsg::ClientType::WINDOWS);
        self.status = ::protobuf::EnumOrUnknown::new(super::chatmsg::OnlineStatus::OFFLINE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LoginRequest {
        static instance: LoginRequest = LoginRequest {
            client_type: ::protobuf::EnumOrUnknown::from_i32(0),
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            login_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LoginRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LoginRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LoginRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoginRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `LoginRequest`
pub mod login_request {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:microchat.user.LoginRequest.login_type)
    pub enum Login_type {
        // @@protoc_insertion_point(oneof_field:microchat.user.LoginRequest.custom)
        Custom(super::CustomLogin),
        // @@protoc_insertion_point(oneof_field:microchat.user.LoginRequest.mobile)
        Mobile(super::MobileLogin),
    }

    impl ::protobuf::Oneof for Login_type {
    }

    impl ::protobuf::OneofFull for Login_type {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::LoginRequest as ::protobuf::MessageFull>::descriptor().oneof_by_name("login_type").unwrap()).clone()
        }
    }

    impl Login_type {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Login_type>("login_type")
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:microchat.user.Gender)
pub enum Gender {
    // @@protoc_insertion_point(enum_value:microchat.user.Gender.Male)
    Male = 0,
    // @@protoc_insertion_point(enum_value:microchat.user.Gender.Female)
    Female = 1,
    // @@protoc_insertion_point(enum_value:microchat.user.Gender.Unknown)
    Unknown = 2,
}

impl ::protobuf::Enum for Gender {
    const NAME: &'static str = "Gender";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Gender> {
        match value {
            0 => ::std::option::Option::Some(Gender::Male),
            1 => ::std::option::Option::Some(Gender::Female),
            2 => ::std::option::Option::Some(Gender::Unknown),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<Gender> {
        match str {
            "Male" => ::std::option::Option::Some(Gender::Male),
            "Female" => ::std::option::Option::Some(Gender::Female),
            "Unknown" => ::std::option::Option::Some(Gender::Unknown),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Gender] = &[
        Gender::Male,
        Gender::Female,
        Gender::Unknown,
    ];
}

impl ::protobuf::EnumFull for Gender {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Gender").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Gender {
    fn default() -> Self {
        Gender::Male
    }
}

impl Gender {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Gender>("Gender")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nuser.proto\x12\x0emicrochat.user\x1a\rchatmsg.proto\"\xad\x01\n\x0fR\
    egisterRequest\x12\x1a\n\x08username\x18\x01\x20\x01(\tR\x08username\x12\
    \x1a\n\x08nickname\x18\x02\x20\x01(\tR\x08nickname\x12\x16\n\x06mobile\
    \x18\x03\x20\x01(\tR\x06mobile\x12\x1a\n\x08password\x18\x04\x20\x01(\tR\
    \x08password\x12.\n\x06gender\x18\x05\x20\x01(\x0e2\x16.microchat.user.G\
    enderR\x06gender\"E\n\x0bCustomLogin\x12\x1a\n\x08username\x18\x01\x20\
    \x01(\tR\x08username\x12\x1a\n\x08password\x18\x02\x20\x01(\tR\x08passwo\
    rd\"9\n\x0bMobileLogin\x12\x16\n\x06mobile\x18\x01\x20\x01(\tR\x06mobile\
    \x12\x12\n\x04code\x18\x02\x20\x01(\rR\x04code\"\xfb\x01\n\x0cLoginReque\
    st\x125\n\x06custom\x18\x01\x20\x01(\x0b2\x1b.microchat.user.CustomLogin\
    H\0R\x06custom\x125\n\x06mobile\x18\x02\x20\x01(\x0b2\x1b.microchat.user\
    .MobileLoginH\0R\x06mobile\x12:\n\x0bclient_type\x18\x03\x20\x01(\x0e2\
    \x19.microchat.msg.ClientTypeR\nclientType\x123\n\x06status\x18\x04\x20\
    \x01(\x0e2\x1b.microchat.msg.OnlineStatusR\x06statusB\x0c\n\nlogin_type*\
    +\n\x06Gender\x12\x08\n\x04Male\x10\0\x12\n\n\x06Female\x10\x01\x12\x0b\
    \n\x07Unknown\x10\x02b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::chatmsg::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(RegisterRequest::generated_message_descriptor_data());
            messages.push(CustomLogin::generated_message_descriptor_data());
            messages.push(MobileLogin::generated_message_descriptor_data());
            messages.push(LoginRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(Gender::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
